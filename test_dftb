#!/usr/bin/env python2
# Copyright (c) 2015, Anders Steen Christensen
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import numpy as np
from dftbfit import ParameterSet
from dftbfit import Molecule
from dftbfit import DataSet

if __name__ == "__main__":

    np.set_printoptions(formatter={'float': '{: 0.3f}'.format}, linewidth=1000000)

    xyz_file = sys.argv[1]
    mol = Molecule(xyz_file)

    par = ParameterSet("/home/andersx/projects/nbo_test/hubbard_fit/slko_3OB/")

    pbe = np.array([0.351,  0.351,  0.195,  0.195,  0.167, -0.420, -0.838])

    # for zeta in np.arange(2.0, 5.0, 0.1):
    # for Ud in np.arange(-0.3, -0.05, 0.01):
    # par.set_zeta(zeta)
    # par.set_hubbard_derivative("H", Ud)

    par.set_zeta(3.5)

    error_min = 10000000000.0

    charges = pbe[:] 

    for Uc in np.arange(0.2, 0.6, 0.02):
        par.set_hubbard("C", Uc)

        energy, charges, scf = mol.run_dftb(par, verbose=False, 
                guess_charges = charges)
        charges = np.array(charges)

        error = np.sum(np.square(charges - pbe))

        print error, scf

