#!/usr/bin/env python2
# Copyright (c) 2015, Anders Steen Christensen
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import sys
import numpy as np
from dftbfit import ParameterSet
from dftbfit import Molecule
from dftbfit import DataSet
from dftbfit import Energy
from dftbfit import Sampler

if __name__ == "__main__":

    # Make sure everything is printed and flushed immediately after --
    # necessary for longer runs.
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

    xyz_dir = sys.argv[1]
    par = ParameterSet("/home/andersx/projects/nbo_test/hubbard_fit/slko_3OB/")
    data = DataSet(xyz_dir)

    sampler = Sampler(par)

    prob = Energy("/home/andersx/projects/nbo_test/dftbfit/pickles/charges_gaussian.pickle")

    energy, charges, scf = data.run_all(par)

    e, n, rmsd = prob.calc_loglik(charges)

    for i in range(1000000):
        print " %6i    " % i,
        par, chg = sampler.sample()
        print "%-4s %5.2f       " % (par, chg),

        energy, charges, scf = data.run_all(sampler.get_parameters())
        e_new, n, rmsd = prob.calc_loglik(charges)

        print " Enew = %-15.6f" % e_new, 

        if e_new < e:
            e = e_new
            print "Accept    Ecurr = %-15.6f    RMSD = %5.3f" % (e, rmsd)
            sampler.iprint()
        else:
            sampler.reject()
            print "Reject    Ecurr = %-15.6f    RMSD = %5.3f" % (e, rmsd)

