#!/usr/bin/env python2
# Copyright (c) 2015, Anders Steen Christensen
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import numpy as np
from dftbfit import ParameterSet
from dftbfit import Molecule
from dftbfit import DataSet

if __name__ == "__main__":

    np.set_printoptions(formatter={'float': '{: 0.3f}'.format}, linewidth=1000000)

    xyz_dir = sys.argv[1]
    par = ParameterSet("/home/andersx/projects/nbo_test/hubbard_fit/slko_3OB/")

    data = DataSet(xyz_dir)
    energy, charges, scf = data.run_all(par)

    zeta = 4.0

    for name in sorted(energy):
        print "%-30s   %3i" % (name, scf[name])

    for i in range(10):

        zeta = zeta - 0.1
        par.set_zeta(zeta)

        for name in sorted(energy):

            if scf[name] > 50:
                charges[name] = [0.0 for _ in range(data.molecules[name].n_atoms)]

        energy, charges, scf = data.run_all(par, guess_charges=charges,
                verbose=False)

        for name in sorted(energy):
            print "Stats: %2i  %-30s   %3i" % (i, name, scf[name])
