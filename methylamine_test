#!/usr/bin/env python2
# Copyright (c) 2015, Anders Steen Christensen
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import numpy as np
from dftbfit import ParameterSet
from dftbfit import Molecule
from dftbfit import DataSet

if __name__ == "__main__":

    np.set_printoptions(formatter={'float': '{: 0.3f}'.format}, linewidth=1000000)

    mol_a = Molecule("methylamine_xyz/13imidazoliummethylamine_a.xyz",
            charge = 1.0)
    mol_b = Molecule("methylamine_xyz/13imidazoliummethylamine_b.xyz")
    mol_c = Molecule("methylamine_xyz/13imidazoliummethylamine_c100.xyz",
            charge = 1.0)


    mol_ac = Molecule("xyz_qcrna/122_ImidazoleH[+1].xyz",
            charge = 1.0)
    mol_bc = Molecule("xyz_qcrna/078_CH3NH2[0].xyz")



    par = ParameterSet("/home/andersx/projects/nbo_test/hubbard_fit/slko_3OB/")


    pbe_a = np.array([ 0.268,  0.268,  0.455,  0.261,  0.455, -0.036, -0.036,  0.225, -0.430, -0.430])
    pbe_b = np.array([ 0.351,  0.351,  0.195,  0.195,  0.167, -0.420, -0.838])

    par.set_zeta(2.0569)
    par.set_hubbard("H", 0.2698)
    par.set_hubbard("C", 0.2745)
    par.set_hubbard("N", 0.3876)
    par.set_hubbard_derivative("H", -0.0001)
    par.set_hubbard_derivative("C", -0.0001)
    par.set_hubbard_derivative("N", -0.1059)

    
    a, charges, scf = mol_a.run_dftb(par, verbose=False)

    charges = np.array(charges)
    print "DFTB3 ", charges, np.sum(charges)
    print "PBE   ", pbe_a, np.sum(pbe_a)
    print "DIFF  ", pbe_a - charges


    b, charges, scf = mol_bc.run_dftb(par, verbose=False)

    charges = np.array(charges)
    print "DFTB3 ", charges
    print "PBE   ", pbe_b
    print "DIFF  ", pbe_b - charges

    a, charges, scf = mol_a.run_dftb(par, verbose=False)
    b, charges, scf = mol_b.run_dftb(par, verbose=False)
    c, charges, scf = mol_c.run_dftb(par, verbose=False)

    print a        
    print b        
    print c
    print 25 + c - (b + a)


